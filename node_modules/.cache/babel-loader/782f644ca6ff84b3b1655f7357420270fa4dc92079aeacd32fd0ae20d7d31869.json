{"ast":null,"code":"var _jsxFileName = \"/Users/charlesleclercq/Documents/Github/portfolio-react/portfolio-react/src/components/LinkList/LinkList.js\";\nimport React from 'react';\n// import './Links.css';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayLinks = ({\n  linkData\n}) => {\n  // Check if linkData exists and is an array\n  if (!Array.isArray(linkData)) {\n    console.error(\"Invalid data format for pressLinks. Expected an array.\");\n    return null; // Return null if linkData is invalid\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"links-content\",\n    children: linkData.map((linkItem, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: linkItem.link,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: linkItem.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), index < linkData.length - 1 && ', ']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n};\n_c = DisplayLinks;\nDisplayLinks.propTypes = {\n  linkData: PropTypes.arrayOf(PropTypes.shape({\n    link: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })).isRequired\n};\nexport default DisplayLinks;\nvar _c;\n$RefreshReg$(_c, \"DisplayLinks\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","DisplayLinks","linkData","Array","isArray","console","error","className","children","map","linkItem","index","Fragment","href","link","target","rel","title","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","propTypes","arrayOf","shape","string","isRequired","$RefreshReg$"],"sources":["/Users/charlesleclercq/Documents/Github/portfolio-react/portfolio-react/src/components/LinkList/LinkList.js"],"sourcesContent":["import React from 'react';\n// import './Links.css';\nimport PropTypes from 'prop-types';\n\nconst DisplayLinks = ({ linkData }) => {\n // Check if linkData exists and is an array\n if (!Array.isArray(linkData)) {\n  console.error(\"Invalid data format for pressLinks. Expected an array.\");\n  return null; // Return null if linkData is invalid\n}\n\nreturn (\n  <div className=\"links-content\">\n    {linkData.map((linkItem, index) => (\n      <React.Fragment key={index}>\n        <a \n          href={linkItem.link} \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n        >\n          {linkItem.title}\n        </a>\n        {index < linkData.length - 1 && ', '}\n      </React.Fragment>\n    ))}\n  </div>\n);\n};\n\nDisplayLinks.propTypes = {\nlinkData: PropTypes.arrayOf(\n  PropTypes.shape({\n    link: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  })\n).isRequired,\n};\n\nexport default  DisplayLinks;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACtC;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;IAC7BG,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;IACvE,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,oBACEN,OAAA;IAAKO,SAAS,EAAC,eAAe;IAAAC,QAAA,EAC3BN,QAAQ,CAACO,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC5BX,OAAA,CAACH,KAAK,CAACe,QAAQ;MAAAJ,QAAA,gBACbR,OAAA;QACEa,IAAI,EAAEH,QAAQ,CAACI,IAAK;QACpBC,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QAAAR,QAAA,EAExBE,QAAQ,CAACO;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,EACHV,KAAK,GAAGT,QAAQ,CAACoB,MAAM,GAAG,CAAC,IAAI,IAAI;IAAA,GARjBX,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAER,CAAC;AAACE,EAAA,GAvBItB,YAAY;AAyBlBA,YAAY,CAACuB,SAAS,GAAG;EACzBtB,QAAQ,EAAEJ,SAAS,CAAC2B,OAAO,CACzB3B,SAAS,CAAC4B,KAAK,CAAC;IACdZ,IAAI,EAAEhB,SAAS,CAAC6B,MAAM,CAACC,UAAU;IACjCX,KAAK,EAAEnB,SAAS,CAAC6B,MAAM,CAACC;EAC1B,CAAC,CACH,CAAC,CAACA;AACF,CAAC;AAED,eAAgB3B,YAAY;AAAC,IAAAsB,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}