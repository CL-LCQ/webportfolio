{"ast":null,"code":"import React,{useEffect,useState}from'react';import'./MediaDisplay.css';import{jsx as _jsx}from\"react/jsx-runtime\";const DisplayMedia=_ref=>{let{url}=_ref;const[mediaType,setMediaType]=useState('');// video, image, or youtube\nconst[youtubeId,setYoutubeId]=useState(null);const[isLoaded,setIsLoaded]=useState(false);// Used to know when media is fully loaded\nuseEffect(()=>{if(!url){console.error(\"URL is missing.\");return;}// Determine the type of media to render\nif(url.includes('youtube.com')||url.includes('youtu.be')){setMediaType('youtube');setYoutubeId(extractYouTubeId(url));}else if(url.endsWith('.mp4')||url.endsWith('.webm')){setMediaType('video');}else{setMediaType('image');}// Reset loading state whenever the URL changes\nsetIsLoaded(false);},[url]);const handleMediaLoad=()=>{setIsLoaded(true);};const renderMedia=()=>{switch(mediaType){case'youtube':return/*#__PURE__*/_jsx(\"iframe\",{width:\"100%\",height:\"100%\",src:\"https://www.youtube.com/embed/\".concat(youtubeId,\"?autoplay=1&loop=1&mute=1&controls=0&modestbranding=1&rel=0&iv_load_policy=3&showinfo=0&fs=0&disablekb=1\"),allowFullScreen:true,frameBorder:\"0\",allow:\"autoplay; encrypted-media;\",onLoad:handleMediaLoad});case'video':return/*#__PURE__*/_jsx(\"video\",{src:url,autoPlay:true,loop:true,muted:true,controls:true,className:\"video-element\",onLoadedMetadata:handleMediaLoad});case'image':return/*#__PURE__*/_jsx(\"img\",{src:url,alt:\"media content\",className:\"image-element\",onLoad:handleMediaLoad});default:return null;}};return/*#__PURE__*/_jsx(\"div\",{className:\"media-container \".concat(isLoaded?'loaded':'loading'),children:renderMedia()});};// Function to extract YouTube video ID from a URL\nfunction extractYouTubeId(url){const regex=/(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;const match=url.match(regex);return match?match[1]:null;}export default DisplayMedia;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","DisplayMedia","_ref","url","mediaType","setMediaType","youtubeId","setYoutubeId","isLoaded","setIsLoaded","console","error","includes","extractYouTubeId","endsWith","handleMediaLoad","renderMedia","width","height","src","concat","allowFullScreen","frameBorder","allow","onLoad","autoPlay","loop","muted","controls","className","onLoadedMetadata","alt","children","regex","match"],"sources":["/Users/charlesleclercq/Documents/Github/portfolio-react/portfolio-react/src/components/MediaDisplay/MediaDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './MediaDisplay.css';\n\nconst DisplayMedia = ({ url }) => {\n  const [mediaType, setMediaType] = useState(''); // video, image, or youtube\n  const [youtubeId, setYoutubeId] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false); // Used to know when media is fully loaded\n\n  useEffect(() => {\n    if (!url) {\n      console.error(\"URL is missing.\");\n      return;\n    }\n\n    // Determine the type of media to render\n    if (url.includes('youtube.com') || url.includes('youtu.be')) {\n      setMediaType('youtube');\n      setYoutubeId(extractYouTubeId(url));\n    } else if (url.endsWith('.mp4') || url.endsWith('.webm')) {\n      setMediaType('video');\n    } else {\n      setMediaType('image');\n    }\n\n    // Reset loading state whenever the URL changes\n    setIsLoaded(false);\n  }, [url]);\n\n  const handleMediaLoad = () => {\n    setIsLoaded(true);\n  };\n\n  const renderMedia = () => {\n    switch (mediaType) {\n      case 'youtube':\n        return (\n          <iframe\n            width=\"100%\"\n            height=\"100%\"\n            src={`https://www.youtube.com/embed/${youtubeId}?autoplay=1&loop=1&mute=1&controls=0&modestbranding=1&rel=0&iv_load_policy=3&showinfo=0&fs=0&disablekb=1`}\n            allowFullScreen\n            frameBorder=\"0\"\n            allow=\"autoplay; encrypted-media;\"\n            onLoad={handleMediaLoad}\n          />\n        );\n\n      case 'video':\n        return (\n          <video\n            src={url}\n            autoPlay\n            loop\n            muted\n            controls\n            className=\"video-element\"\n            onLoadedMetadata={handleMediaLoad}\n          />\n        );\n\n      case 'image':\n        return (\n          <img \n            src={url} \n            alt=\"media content\" \n            className=\"image-element\" \n            onLoad={handleMediaLoad} \n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div \n      className={`media-container ${isLoaded ? 'loaded' : 'loading'}`}\n    >\n      {renderMedia()}\n    </div>\n  );\n};\n\n// Function to extract YouTube video ID from a URL\nfunction extractYouTubeId(url) {\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n  const match = url.match(regex);\n  return match ? match[1] : null;\n}\n\nexport default DisplayMedia;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5B,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAa,IAAZ,CAAEC,GAAI,CAAC,CAAAD,IAAA,CAC3B,KAAM,CAACE,SAAS,CAAEC,YAAY,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAAE;AAChD,KAAM,CAACQ,SAAS,CAAEC,YAAY,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAAE;AAEjDD,SAAS,CAAC,IAAM,CACd,GAAI,CAACM,GAAG,CAAE,CACRO,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC,CAChC,OACF,CAEA;AACA,GAAIR,GAAG,CAACS,QAAQ,CAAC,aAAa,CAAC,EAAIT,GAAG,CAACS,QAAQ,CAAC,UAAU,CAAC,CAAE,CAC3DP,YAAY,CAAC,SAAS,CAAC,CACvBE,YAAY,CAACM,gBAAgB,CAACV,GAAG,CAAC,CAAC,CACrC,CAAC,IAAM,IAAIA,GAAG,CAACW,QAAQ,CAAC,MAAM,CAAC,EAAIX,GAAG,CAACW,QAAQ,CAAC,OAAO,CAAC,CAAE,CACxDT,YAAY,CAAC,OAAO,CAAC,CACvB,CAAC,IAAM,CACLA,YAAY,CAAC,OAAO,CAAC,CACvB,CAEA;AACAI,WAAW,CAAC,KAAK,CAAC,CACpB,CAAC,CAAE,CAACN,GAAG,CAAC,CAAC,CAET,KAAM,CAAAY,eAAe,CAAGA,CAAA,GAAM,CAC5BN,WAAW,CAAC,IAAI,CAAC,CACnB,CAAC,CAED,KAAM,CAAAO,WAAW,CAAGA,CAAA,GAAM,CACxB,OAAQZ,SAAS,EACf,IAAK,SAAS,CACZ,mBACEJ,IAAA,WACEiB,KAAK,CAAC,MAAM,CACZC,MAAM,CAAC,MAAM,CACbC,GAAG,kCAAAC,MAAA,CAAmCd,SAAS,4GAA2G,CAC1Je,eAAe,MACfC,WAAW,CAAC,GAAG,CACfC,KAAK,CAAC,4BAA4B,CAClCC,MAAM,CAAET,eAAgB,CACzB,CAAC,CAGN,IAAK,OAAO,CACV,mBACEf,IAAA,UACEmB,GAAG,CAAEhB,GAAI,CACTsB,QAAQ,MACRC,IAAI,MACJC,KAAK,MACLC,QAAQ,MACRC,SAAS,CAAC,eAAe,CACzBC,gBAAgB,CAAEf,eAAgB,CACnC,CAAC,CAGN,IAAK,OAAO,CACV,mBACEf,IAAA,QACEmB,GAAG,CAAEhB,GAAI,CACT4B,GAAG,CAAC,eAAe,CACnBF,SAAS,CAAC,eAAe,CACzBL,MAAM,CAAET,eAAgB,CACzB,CAAC,CAGN,QACE,MAAO,KAAI,CACf,CACF,CAAC,CAED,mBACEf,IAAA,QACE6B,SAAS,oBAAAT,MAAA,CAAqBZ,QAAQ,CAAG,QAAQ,CAAG,SAAS,CAAG,CAAAwB,QAAA,CAE/DhB,WAAW,CAAC,CAAC,CACX,CAAC,CAEV,CAAC,CAED;AACA,QAAS,CAAAH,gBAAgBA,CAACV,GAAG,CAAE,CAC7B,KAAM,CAAA8B,KAAK,CAAG,gGAAgG,CAC9G,KAAM,CAAAC,KAAK,CAAG/B,GAAG,CAAC+B,KAAK,CAACD,KAAK,CAAC,CAC9B,MAAO,CAAAC,KAAK,CAAGA,KAAK,CAAC,CAAC,CAAC,CAAG,IAAI,CAChC,CAEA,cAAe,CAAAjC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}