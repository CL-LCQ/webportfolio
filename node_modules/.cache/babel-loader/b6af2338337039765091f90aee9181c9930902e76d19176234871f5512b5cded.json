{"ast":null,"code":"var _jsxFileName = \"/Users/charlesleclercq/Documents/Github/portfolio-react/portfolio-react/src/components/LinkList/LinkList.js\";\nimport React from 'react';\nimport './LinkList.css';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayLinks = ({\n  links\n}) => {\n  if (Array.isArray(links)) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"link-container\",\n      children: links.map((linkItem, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: linkItem.link,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: linkItem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 13\n        }, this), index < links.length - 1 && ', ']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  }\n  if (typeof links === 'string') {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"link-container\",\n      children: links\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  console.error(\"Invalid data format for links. Expected an array or string, but received:\", links);\n  return null;\n};\n_c = DisplayLinks;\nDisplayLinks.defaultProps = {\n  links: ''\n};\nDisplayLinks.propTypes = {\n  links: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    link: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })), PropTypes.string])\n};\nexport default DisplayLinks;\nvar _c;\n$RefreshReg$(_c, \"DisplayLinks\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","DisplayLinks","links","Array","isArray","className","children","map","linkItem","index","Fragment","href","link","target","rel","title","fileName","_jsxFileName","lineNumber","columnNumber","length","console","error","_c","defaultProps","propTypes","oneOfType","arrayOf","shape","string","isRequired","$RefreshReg$"],"sources":["/Users/charlesleclercq/Documents/Github/portfolio-react/portfolio-react/src/components/LinkList/LinkList.js"],"sourcesContent":["import React from 'react';\nimport './LinkList.css';\nimport PropTypes from 'prop-types';\n\nconst DisplayLinks = ({ links }) => {\n  if (Array.isArray(links)) {\n    return (\n      <span className=\"link-container\">\n        {links.map((linkItem, index) => (\n          <React.Fragment key={index}>\n            <a href={linkItem.link} target=\"_blank\" rel=\"noopener noreferrer\">\n              {linkItem.title}\n            </a>\n            {index < links.length - 1 && ', '}\n          </React.Fragment>\n        ))}\n      </span>\n    );\n  }\n\n  if (typeof links === 'string') {\n    return <span className=\"link-container\">{links}</span>;\n  }\n\n  console.error(\"Invalid data format for links. Expected an array or string, but received:\", links);\n  return null;\n};\n\nDisplayLinks.defaultProps = {\n  links: ''\n};\n\nDisplayLinks.propTypes = {\n  links: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        link: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n      })\n    ),\n    PropTypes.string\n  ])\n};\n\nexport default DisplayLinks;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AACvB,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAClC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACxB,oBACEF,OAAA;MAAMK,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC7BJ,KAAK,CAACK,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACzBT,OAAA,CAACH,KAAK,CAACa,QAAQ;QAAAJ,QAAA,gBACbN,OAAA;UAAGW,IAAI,EAAEH,QAAQ,CAACI,IAAK;UAACC,MAAM,EAAC,QAAQ;UAACC,GAAG,EAAC,qBAAqB;UAAAR,QAAA,EAC9DE,QAAQ,CAACO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,EACHV,KAAK,GAAGP,KAAK,CAACkB,MAAM,GAAG,CAAC,IAAI,IAAI;MAAA,GAJdX,KAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEX;EAEA,IAAI,OAAOjB,KAAK,KAAK,QAAQ,EAAE;IAC7B,oBAAOF,OAAA;MAAMK,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEJ;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EACxD;EAEAE,OAAO,CAACC,KAAK,CAAC,2EAA2E,EAAEpB,KAAK,CAAC;EACjG,OAAO,IAAI;AACb,CAAC;AAACqB,EAAA,GAtBItB,YAAY;AAwBlBA,YAAY,CAACuB,YAAY,GAAG;EAC1BtB,KAAK,EAAE;AACT,CAAC;AAEDD,YAAY,CAACwB,SAAS,GAAG;EACvBvB,KAAK,EAAEJ,SAAS,CAAC4B,SAAS,CAAC,CACzB5B,SAAS,CAAC6B,OAAO,CACf7B,SAAS,CAAC8B,KAAK,CAAC;IACdhB,IAAI,EAAEd,SAAS,CAAC+B,MAAM,CAACC,UAAU;IACjCf,KAAK,EAAEjB,SAAS,CAAC+B,MAAM,CAACC;EAC1B,CAAC,CACH,CAAC,EACDhC,SAAS,CAAC+B,MAAM,CACjB;AACH,CAAC;AAED,eAAe5B,YAAY;AAAC,IAAAsB,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}