{"ast":null,"code":"var _jsxFileName = \"/Users/charlesleclercq/Documents/Github/webportfolio/src/components/MediaDisplay/MediaDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './MediaDisplay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayMedia = ({\n  url\n}) => {\n  _s();\n  const [mediaType, setMediaType] = useState(''); // video, image, or youtube\n  const [youtubeId, setYoutubeId] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false); // Used to know when media is fully loaded\n\n  useEffect(() => {\n    if (!url) {\n      console.error(\"URL is missing.\");\n      return;\n    }\n\n    // Determine the type of media to render\n    if (url.includes('youtube.com') || url.includes('youtu.be')) {\n      setMediaType('youtube');\n      setYoutubeId(extractYouTubeId(url));\n    } else if (url.endsWith('.mp4') || url.endsWith('.webm')) {\n      setMediaType('video');\n    } else {\n      setMediaType('image');\n    }\n\n    // Reset loading state whenever the URL changes\n    setIsLoaded(false);\n  }, [url]);\n  const handleMediaLoad = () => {\n    setIsLoaded(true);\n  };\n  const renderMedia = () => {\n    switch (mediaType) {\n      case 'youtube':\n        return /*#__PURE__*/_jsxDEV(\"iframe\", {\n          width: \"100%\",\n          height: \"100%\",\n          src: `https://www.youtube.com/embed/${youtubeId}?autoplay=1&loop=1&mute=1&controls=0&modestbranding=1&rel=0&iv_load_policy=3&showinfo=0&fs=0&disablekb=1`,\n          allowFullScreen: true,\n          frameBorder: \"0\",\n          allow: \"autoplay; encrypted-media;\",\n          onLoad: handleMediaLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      case 'video':\n        return /*#__PURE__*/_jsxDEV(\"video\", {\n          src: url,\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          controls: true,\n          className: \"video-element\",\n          onLoadedMetadata: handleMediaLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this);\n      case 'image':\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: url,\n          alt: \"media content\",\n          className: \"image-element\",\n          onLoad: handleMediaLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `media-container ${isLoaded ? 'loaded' : 'loading'}`,\n    children: renderMedia()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to extract YouTube video ID from a URL\n_s(DisplayMedia, \"akiN+XU1Ct37XSQMvZtu255DPnE=\");\n_c = DisplayMedia;\nfunction extractYouTubeId(url) {\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n  const match = url.match(regex);\n  return match ? match[1] : null;\n}\nexport default DisplayMedia;\nvar _c;\n$RefreshReg$(_c, \"DisplayMedia\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DisplayMedia","url","_s","mediaType","setMediaType","youtubeId","setYoutubeId","isLoaded","setIsLoaded","console","error","includes","extractYouTubeId","endsWith","handleMediaLoad","renderMedia","width","height","src","allowFullScreen","frameBorder","allow","onLoad","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","controls","className","onLoadedMetadata","alt","children","_c","regex","match","$RefreshReg$"],"sources":["/Users/charlesleclercq/Documents/Github/webportfolio/src/components/MediaDisplay/MediaDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './MediaDisplay.css';\n\nconst DisplayMedia = ({ url }) => {\n  const [mediaType, setMediaType] = useState(''); // video, image, or youtube\n  const [youtubeId, setYoutubeId] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false); // Used to know when media is fully loaded\n\n  useEffect(() => {\n    if (!url) {\n      console.error(\"URL is missing.\");\n      return;\n    }\n\n    // Determine the type of media to render\n    if (url.includes('youtube.com') || url.includes('youtu.be')) {\n      setMediaType('youtube');\n      setYoutubeId(extractYouTubeId(url));\n    } else if (url.endsWith('.mp4') || url.endsWith('.webm')) {\n      setMediaType('video');\n    } else {\n      setMediaType('image');\n    }\n\n    // Reset loading state whenever the URL changes\n    setIsLoaded(false);\n  }, [url]);\n\n  const handleMediaLoad = () => {\n    setIsLoaded(true);\n  };\n\n  const renderMedia = () => {\n    switch (mediaType) {\n      case 'youtube':\n        return (\n          <iframe\n            width=\"100%\"\n            height=\"100%\"\n            src={`https://www.youtube.com/embed/${youtubeId}?autoplay=1&loop=1&mute=1&controls=0&modestbranding=1&rel=0&iv_load_policy=3&showinfo=0&fs=0&disablekb=1`}\n            allowFullScreen\n            frameBorder=\"0\"\n            allow=\"autoplay; encrypted-media;\"\n            onLoad={handleMediaLoad}\n          />\n        );\n\n      case 'video':\n        return (\n          <video\n            src={url}\n            autoPlay\n            loop\n            muted\n            controls\n            className=\"video-element\"\n            onLoadedMetadata={handleMediaLoad}\n          />\n        );\n\n      case 'image':\n        return (\n          <img \n            src={url} \n            alt=\"media content\" \n            className=\"image-element\" \n            onLoad={handleMediaLoad} \n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div \n      className={`media-container ${isLoaded ? 'loaded' : 'loading'}`}\n    >\n      {renderMedia()}\n    </div>\n  );\n};\n\n// Function to extract YouTube video ID from a URL\nfunction extractYouTubeId(url) {\n  const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/[^\\/]+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n  const match = url.match(regex);\n  return match ? match[1] : null;\n}\n\nexport default DisplayMedia;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}